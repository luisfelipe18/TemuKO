#pragma once
#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <VirtualizerSDK.h>
#include <stdio.h>
#include <string>
#include <algorithm>
#include <detours.h>
#include <vector>
#include <tchar.h>
#include <psapi.h>
#include <atlstr.h>
#include <fstream>
#include "Packet.h"
#include <shellapi.h>
#include <winnetwk.h>
#include <Iphlpapi.h>
#include <list>
#include "md5.h"
#include <d3d9.h>
#include <d3dx9.h>
#include <utility>
//#include <VMProtectSDK.h>
#include "xorstr.h"

#pragma comment(lib, "detours.lib")
#pragma comment(lib, "d3d9.lib")
#pragma comment(lib, "d3dx9.lib")
#pragma comment(lib, "iphlpapi.lib")
#pragma comment(lib, "Psapi.lib")
#pragma comment(lib, "detours.lib")
#pragma comment(lib, "user32.lib")
#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "Mpr.lib")
#pragma comment(lib, "VirtualizerSDK32.lib")

#define __ASSERT(expr, expMessage) \
if(!(expr)) {\
	printf("ERROR-> %s\n%s: %d\n\n", expMessage, __FILE__, __LINE__);\
}

#define ARRAY_SIZE 1024

using namespace std;

#include <thread>
#include <chrono>
#include <atomic>
#include <mutex>

#include "ErrorMessage.h"
class Guard
{
public:
	Guard(std::recursive_mutex& mutex) : target(mutex) { target.lock(); }
	Guard(std::recursive_mutex* mutex) : target(*mutex) { target.lock(); }
	~Guard() { target.unlock(); }

protected:
	std::recursive_mutex& target;
};

enum UserAuthority {
	BANNED = 255,
	USER = 1,
	GAMEMASTER = 0
};

struct ScreenInfo {
	int height;
	int width;
};

struct ProcessInfo {
	int id;
	string name;
	vector<string> windows;
};

struct User
{
	string Nick;
	UserAuthority Authority;
	uint32 KnightCash;
	uint32 KnightCashBonus;
	uint32 NationPoint;
	uint8 Level;
	uint8 RebLevel;
	uint8 ddAc;
	uint8 axeAc;
	uint8 swordAc;
	uint8 maceAc;
	uint8 arrowAc;
	uint8 spearAc;
	bool isTeleporting;
	bool logOut;
	bool isGameStat;
	bool m_iClanBank;
	uint16 zone;
	int64 HWID;
	vector<string> GPU;
	string CPU;
	ScreenInfo * Screen;
	vector<ProcessInfo> Processes;
	uint32 MAC;

	virtual bool isClanBank() { return m_iClanBank; }
};

enum PUS_CATEGORY
{
	SPECIAL = 1,
	POWER_UP = 2,
	COSTUME = 3,
	BUNDLE = 4
};

struct PUSItem
{
	uint32 sID;
	uint32 Price;
	uint32 Quantitiy;
	PUS_CATEGORY Category;
	PUSItem(uint32 sid, uint32 price, PUS_CATEGORY category, uint32 quantity) {
		sID = sid;
		Price = price;
		Category = category;
		Quantitiy = quantity;
	}
};

struct ITEM_DATA
{
	string itemName;
	uint32 itemID;
	uint16 sCount, sDuration;
	ITEM_DATA(string name, uint32 id, uint16 count, uint16 duration)
	{
		itemName = name;
		itemID = id;
		sCount = count;
		sDuration = duration;
	}
};

struct CR_EVENT
{
	uint16 mobs[4];
	uint16 killTarget[4];
	uint16 killCount[4];
	uint32 rewards[2];
	uint32 rewardsCount[2];
	uint32 rewardNoah;
	uint32 rewardExp;
	uint32 rewardNP;
	uint32 rewardKC;
	uint32 endTime;
	CR_EVENT()
	{
		for (int i = 0; i < 4; i++)
		{
			mobs[i] = 0;
			killTarget[i] = 0;
			rewards[i] = 0;
			rewardsCount[i] = 0;
		}
		rewardNoah = 0;
		rewardExp = 0;
		rewardNP = 0;
		rewardKC = 0;
		endTime = 0;
	}
};

struct DROP
{
	string itemName;
	uint16 dropRate;
	DROP(string n, uint16 d) {
		itemName = n;
		dropRate = d;
	}
};

struct DROP_RESULT
{
	string mName;
	vector<DROP> drops;
	string mZone;
	DROP_RESULT(string n, vector<DROP> d, string z) {
		mName = n;
		drops = d;
		mZone = z;
	}
};

struct DropItem
{
	uint32 nItemID;
	uint16 sPercent;
	DropItem(uint32 id, uint16 per)
	{
		nItemID = id;
		sPercent = per;
	}
};

typedef struct __TABLE_MOB
{
	uint32 ID;
	std::string strName;
	uint32 Model;
	uint8 isBoss;
	uint8 UNK;
} TABLE_MOB;

// Define a minute as 60s.
#define MINUTE				60u
// Define a second as 1000ms.
#define SECOND				1000u

#define PL_VERSION 2
#define WIZ_LOGIN				0x01	// Account Login
#define WIZ_NEW_CHAR			0x02	// Create Character DB
#define WIZ_DEL_CHAR			0x03	// Delete Character DB
#define WIZ_SEL_CHAR			0x04	// Select Character
#define WIZ_SEL_NATION			0x05	// Select Nation
#define WIZ_MOVE				0x06	// Move ( 1 Second )
#define WIZ_USER_INOUT			0x07	// User Info Insert, delete
#define WIZ_ATTACK				0x08	// General Attack 
#define WIZ_ROTATE				0x09	// Rotate
#define WIZ_NPC_INOUT			0x0A	// Npc Info Insert, delete
#define WIZ_NPC_MOVE			0x0B	// Npc Move ( 1 Second )
#define WIZ_ALLCHAR_INFO_REQ	0x0C	// Account All Character Info Request
#define WIZ_GAMESTART			0x0D	// Request Other User, Npc Info
#define WIZ_MYINFO				0x0E	// User Detail Data Download
#define WIZ_LOGOUT				0x0F	// Request Logout
#define WIZ_CHAT				0x10	// User Chatting..
#define WIZ_DEAD				0x11	// User Dead
#define WIZ_REGENE				0x12	// User	Regeneration
#define WIZ_TIME				0x13	// Game Timer
#define WIZ_WEATHER				0x14	// Game Weather
#define WIZ_REGIONCHANGE		0x15	// Region UserInfo Receive
#define WIZ_REQ_USERIN			0x16	// Client Request UnRegistered User List
#define WIZ_HP_CHANGE			0x17	// Current HP Download
#define WIZ_MSP_CHANGE			0x18	// Current MP Download
#define WIZ_ITEM_LOG			0x19	// Send To Agent for Writing Log
#define WIZ_EXP_CHANGE			0x1A	// Current EXP Download
#define WIZ_LEVEL_CHANGE		0x1B	// Max HP, MP, SP, Weight, Exp Download
#define WIZ_NPC_REGION			0x1C	// Npc Region Change Receive
#define WIZ_REQ_NPCIN			0x1D	// Client Request UnRegistered NPC List
#define WIZ_WARP				0x1E	// User Remote Warp
#define WIZ_ITEM_MOVE			0x1F	// User Item Move
#define WIZ_NPC_EVENT			0x20	// User Click Npc Event
#define WIZ_ITEM_TRADE			0x21	// Item Trade 
#define WIZ_TARGET_HP			0x22	// Attack Result Target HP 
#define WIZ_ITEM_DROP			0x23	// Zone Item Insert
#define WIZ_BUNDLE_OPEN_REQ		0x24	// Zone Item list Request
#define WIZ_TRADE_NPC			0x25	// ITEM Trade start
#define WIZ_ITEM_GET			0x26	// Zone Item Get
#define WIZ_ZONE_CHANGE			0x27	// Zone Change
#define WIZ_POINT_CHANGE		0x28	// Str, Sta, dex, intel, cha, point up down
#define WIZ_STATE_CHANGE		0x29	// User Sitdown or Stand
#define WIZ_LOYALTY_CHANGE		0x2A	// Nation Contribution
#define WIZ_VERSION_CHECK		0x2B	// Client version check 
#define WIZ_CRYPTION			0x2C	// Cryption
#define WIZ_USERLOOK_CHANGE		0x2D	// User Slot Item Resource Change
#define WIZ_NOTICE				0x2E	// Update Notice Alarm 
#define WIZ_PARTY				0x2F	// Party Related Packet
#define WIZ_EXCHANGE			0x30	// Exchange Related Packet
#define WIZ_MAGIC_PROCESS		0x31	// Magic Related Packet
#define WIZ_SKILLPT_CHANGE		0x32	// User changed particular skill point
#define WIZ_OBJECT_EVENT		0x33	// Map Object Event Occur ( ex : Bind Point Setting )
#define WIZ_CLASS_CHANGE		0x34	// 10 level over can change class 
#define WIZ_CHAT_TARGET			0x35	// Select Private Chanting User
#define WIZ_CONCURRENTUSER		0x36	// Current Game User Count
#define WIZ_DATASAVE			0x37	// User GameData DB Save Request
#define WIZ_DURATION			0x38	// Item Durability Change
#define WIZ_TIMENOTIFY			0x39	// Time Adaption Magic Time Notify Packet ( 2 Seconds )
#define WIZ_REPAIR_NPC			0x3A	// Item Trade, Upgrade and Repair
#define WIZ_ITEM_REPAIR			0x3B	// Item Repair Processing
#define WIZ_KNIGHTS_PROCESS		0x3C	// Knights Related Packet..
#define WIZ_ITEM_COUNT_CHANGE   0x3D    // Item cout change.  
#define WIZ_KNIGHTS_LIST		0x3E	// All Knights List Info download
#define WIZ_ITEM_REMOVE			0x3F	// Item Remove from inventory
#define WIZ_OPERATOR			0x40	// Operator Authority Packet
#define WIZ_SPEEDHACK_CHECK		0x41	// Speed Hack Using Check
#define WIZ_COMPRESS_PACKET		0x42	// Data Compressing Packet
#define WIZ_SERVER_CHECK		0x43	// Server Status Check Packet
#define WIZ_CONTINOUS_PACKET	0x44	// Region Data Packet 
#define WIZ_WAREHOUSE			0x45	// Warehouse Open, In, Out
#define WIZ_SERVER_CHANGE		0x46	// When you change the server
#define WIZ_REPORT_BUG			0x47	// Report Bug to the manager
#define WIZ_HOME				0x48    // 'Come back home' by Seo Taeji & Boys
#define WIZ_FRIEND_PROCESS		0x49	// Get the status of your friend
#define WIZ_GOLD_CHANGE			0x4A	// When you get the gold of your enemy.
#define WIZ_WARP_LIST			0x4B	// Warp List by NPC or Object
#define WIZ_VIRTUAL_SERVER		0x4C	// Battle zone Server Info packet	(IP, Port)
#define WIZ_ZONE_CONCURRENT		0x4D	// Battle zone concurrent users request packet
#define WIZ_CORPSE				0x4e	// To have your corpse have an ID on top of it.
#define WIZ_PARTY_BBS			0x4f	// For the party wanted bulletin board service..
#define WIZ_MARKET_BBS			0x50	// For the market bulletin board service...
#define WIZ_KICKOUT				0x51	// Account ID forbid duplicate connection
#define WIZ_CLIENT_EVENT		0x52	// Client Event (for quest)
#define WIZ_MAP_EVENT			0x53
#define WIZ_WEIGHT_CHANGE		0x54	// Notify change of weight
#define WIZ_SELECT_MSG			0x55	// Select Event Message...
#define WIZ_NPC_SAY				0x56
#define WIZ_BATTLE_EVENT		0x57
#define WIZ_AUTHORITY_CHANGE	0x58
#define WIZ_EDIT_BOX			0x59
#define WIZ_SANTA				0x5A

#define WIZ_ITEM_UPGRADE		0x5B
#define WIZ_PACKET1				0x5C
#define WIZ_PACKET2				0x5D
#define WIZ_ZONEABILITY			0x5E	
#define WIZ_EVENT				0x5F
#define WIZ_STEALTH				0x60
#define WIZ_ROOM_PACKETPROCESS	0x61
#define WIZ_ROOM				0x62
#define WIZ_PACKET3				0x63
#define WIZ_QUEST				0x64
#define WIZ_PACKET4				0x65
#define WIZ_KISS				0x66
#define WIZ_RECOMMEND_USER		0x67
#define WIZ_MERCHANT			0x68
#define WIZ_MERCHANT_INOUT		0x69
#define WIZ_SHOPPING_MALL		0x6A
#define WIZ_SERVER_INDEX		0x6B
#define WIZ_EFFECT				0x6C
#define WIZ_SIEGE				0x6D
#define WIZ_NAME_CHANGE			0x6E
#define WIZ_WEBPAGE				0x6F
#define WIZ_CAPE				0x70
#define WIZ_PREMIUM				0x71
#define WIZ_HACKTOOL			0x72
#define WIZ_RENTAL				0x73
#define WIZ_PACKET5				0x74
#define WIZ_CHALLENGE			0x75
#define WIZ_PET					0x76
#define WIZ_CHINA				0x77
#define WIZ_KING				0x78
#define WIZ_SKILLDATA			0x79
#define WIZ_PROGRAMCHECK		0x7A
#define WIZ_BIFROST				0x7B
#define WIZ_REPORT				0x7C
#define WIZ_LOGOSSHOUT			0x7D
#define WIZ_PACKET6				0x7E
#define WIZ_PACKET7				0x7F
#define WIZ_RANK				0x80
#define WIZ_STORY				0x81
#define WIZ_NATION_CHANGE		0x82
#define WIZ_ZONE_TERRAIN		0x83
#define WIZ_PACKET10			0x84
#define WIZ_CAPTURE				0x85
#define WIZ_MINING				0x86
#define WIZ_HELMET				0x87
#define WIZ_PVP					0x88
#define WIZ_CHANGE_HAIR			0x89
#define WIZ_PACKET12			0x8A
#define WIZ_VIPWAREHOUSE		0x8B
#define WIZ_PACKET14			0x8C
#define WIZ_GENDER_CHANGE		0x8D
#define WIZ_PACKET16			0x8E
#define WIZ_PACKET17			0x8F
#define WIZ_DEATH_LIST			0x90
#define WIZ_CLANPOINTS_BATTLE	0x91
#define WIZ_NATION_CHAT			0x19
#define WIZ_GENIE				0x97
#define WIZ_USER_INFO  			0x98
#define WIZ_ACHIEVE				0x99

#define WIZ_EXP_SEAL			0x9A
#define WIZ_SP_CHANGE			0x9B
#define WIZ_ORDER				0x9F

#define WIZ_HOOK_GUARD	0xA1
#define WIZ_CLANWAREHOUSE		0xA2

#define	GAME_CLIENT_NAME "Knight OnLine Client"

enum TEMUKOACSSystem
{
	WIZ_HOOK_COM = 0xB7,
	WIZ_HOOK_AUTHINFO = 0xB8,
	WIZ_HOOK_PROCINFO = 0xB9,
	WIZ_HOOK_OPEN = 0xBA,
	WIZ_HOOK_LOG = 0xBB,
	WIZ_HOOK_ALIVE = 0xBC,
	WIZ_HOOK_UIINFO = 0xBD,
	WIZ_HOOK_PUS = 0xBE,
	WIZ_HOOK_CASHCHANGE = 0xBF,
	WIZ_HOOK_RESET = 0xC0,
	WIZ_HOOK_DROP_REQUEST = 0xC1,
	WIZ_HOOK_CR = 0xC2,
	WIZ_HOOK_CLANBANK = 0xC3,
	WIZ_HOOK_USERINFO = 0xC4,
	WIZ_HOOK_KCPAZAR = 0xC5,
	WIZ_HOOK_LOOT_SETTINS = 0xC6,
	WIZ_HOOK_CHAOTIC_EXCHANGE = 0xC7,
	WIZ_HOOK_CHAOTIC_RESULT = 0xC8,
	WIZ_HOOK_MERCHANT = 0xC9,
	WIZ_HOOK_USERDATA = 0xCA,
	WIZ_HOOK_TEMPITEMS = 0xCB,
	WIZ_HOOK_GMTOOLS = 0xCC,
	WIZ_HOOK_AUTODROP = 0xCD,
	WIZ_HOOK_SUPPORT = 0xCE,
	WIZ_HOOK_INFOMESSAGE = 0xCF,
	WIZ_HOOK_MERCHANTLIST = 0xD6,
	WIZ_HOOK_MESSAGE = 0xD7,
	WIZ_HOOK_LIFESKILL = 0xD8,
	WIZ_HOOK_HPINFO = 0xD9,
	WIZ_HOOK_MONSTER_INFO = 0xDA,
	WIZ_HOOK_EVENT = 0xDB,
	WIZ_HOOK_VOICE = 0xDC,
	WIZ_HOOK_PARTY_PROCESS = 0xDD,
};

const DWORD KO_PTR_CHR	 = 0x00E61920;
const DWORD KO_DLG		 = 0x00E47878;
const DWORD KO_PTR_HWD	 = 0x00CB3E64;
const DWORD KO_FLDB		 = 0x00E6191C;
const DWORD KO_ITOB		 = 0x00E61754;
const DWORD KO_ITEB		 = 0x00E6175C;
const DWORD KO_FMBS		 = 0x004F91A0;
const DWORD KO_FPBS		 = 0x004FA110;
const DWORD KO_FNCZ		 = 0x00523590;
const DWORD KO_FNCB		 = 0x00523700;
const DWORD KO_FNSB		 = 0x004FC300;
const DWORD KO_FINDITEM	 = 0x004BF960;
const DWORD KO_FINDITEM2 = 0x004BF9C0;
const DWORD KO_INFO_MSG	 = 0x006B24F0;
const DWORD KO_EXCEPTION = 0x009DDD60;
const DWORD KO_SH_HOOK	 = 0x004ECABB;
const DWORD KO_SH_VALUE	 = 0x00B95760;
const DWORD KO_RECV_PTR	 = 0x00B96578;
const DWORD KO_RECV_FUNC = 0x0054C900;
const DWORD KO_BASE_CON	 = 0x0057DE50;
const DWORD KO_BASE_DES	 = 0x0057DF80;
const DWORD KO_M_TIMEOUT = 0x00B8FE2C;
const DWORD KO_PERI_TAK	 = 0x00579560;
const DWORD KO_NODC		 = 0x00B95610;
const DWORD KO_PTR_OL1	 = 0x00E47854;
const DWORD KO_ADR_OL1	 = 0x004DB050;
const DWORD KO_ADR_OL2	= 0x004DF9C0;
const DWORD KO_ADR_OL3	= 0x004E2240;
const DWORD KO_ADR_OL4	= 0x004DB590;
const DWORD KO_ADR_OL5	= 0x004C6660;
const DWORD KO_ADR_OL6	= 0x004CB420;
const DWORD KO_ADR_OL7	= 0x004CFD8C;
const DWORD KO_ADR_ROTA1 = 0x00557060;
const DWORD KO_OFF_ZONE = 0x00000C30;
const DWORD KO_OFF_NAME = 0x00000688;
const DWORD KO_OFF_NAMELEN = 0x00000698;
const DWORD KO_OFF_CLASS = 0x000006B0;
const DWORD KO_OFF_ID = 0x00000680;
const DWORD KO_OFF_SWIFT = 0x000007CC;
const DWORD KO_OFF_X = 0x000000D8;
const DWORD KO_OFF_Y = 0x000000E0;
const DWORD KO_OFF_Z = 0x000000DC;
const DWORD KO_OFF_EXP = 0x00000BA4;
const DWORD KO_OFF_MAXEXP = 0x00000BA0;
const DWORD KO_OFF_NATION = 0x000006A8;
const DWORD KO_OFF_MOB = 0x644;
const DWORD KO_OFF_HP = 0x6BC;
const DWORD KO_OFF_MAXHP = 0x6B8;

#define PARTY_CREATE			0x01	// Party Group Create
#define PARTY_PERMIT			0x02	// Party Insert Permit
#define PARTY_INSERT			0x03	// Party Member Insert
#define PARTY_REMOVE			0x04	// Party Member Remove
#define PARTY_DELETE			0x05	// Party Group Delete
#define PARTY_HPCHANGE			0x06	// Party Member HP change
#define PARTY_LEVELCHANGE		0x07	// Party Member Level change
#define PARTY_CLASSCHANGE		0x08	// Party Member Class Change
#define PARTY_STATUSCHANGE		0x09	// Party Member Status ( disaster, poison ) Change
#define PARTY_REGISTER			0x0A	// Party Message Board Register
#define PARTY_REPORT			0x0B	// Party Request Message Board Messages
#define PARTY_PROMOTE			0x1C	// Promotes user to party leader
#define PARTY_ALL_STATUSCHANGE	0x1D	// Sets the specified status of the selected party members to 1.

#define D3DFONT_BOLD        0x0001
#define D3DFONT_ITALIC      0x0002

const   DWORD   KO_IU_MGR_MOUSE_PROC_PTR = 0x00B97764;
const	DWORD	KO_IU_MGR_MOUSE_PROC_FUNC = 0x005A1350;

const	DWORD	KO_UI_HIDE_ALL_CALL_ADDR = 0x0052853F;
const	DWORD	KO_UI_HIDE_ALL_FUNC = 0x005508B0;
const	DWORD	KO_UI_SHOW_ALL_CALL_ADDR = 0x0052857F;
const	DWORD	KO_UI_SHOW_ALL_FUNC = 0x0050DD00;

const	DWORD	KO_DFONT_CONSTRUCTOR_FUNC = 0x004528E0;
const	DWORD	KO_UI_BASE_VTABLE = 0x00B8FA14;
const	DWORD	KO_UI_IMAGE_TOOLTIP_DLG_VTABLE = 0x00B97BD4;

const   DWORD   KO_GET_CHILD_BY_ID_FUNC = 0x00410FC0;
const   DWORD   KO_SET_STRING_FUNC = 0x004284A0;
const	DWORD	KO_SET_STRING_PTR = 0x00B90408;
const   DWORD   KO_UI_STATE_RECEIVE_MESSAGE_PTR = 0x00BA2178;
const   DWORD   KO_UI_STATE_RECEIVE_MESSAGE_FUNC = 0x00717C60;

const   DWORD   KO_SET_VISIBLE_FUNC = 0x00411470;
const	DWORD	KO_UI_TASKBAR_MAIN_RECEIVE_MESSAGE_PTR = 0x00BA9BF8;
const	DWORD	KO_UI_TASKBAR_MAIN_RECEIVE_MESSAGE_FUNC = 0x00817310;
const	DWORD	KO_UI_MINI_MAIN_RECEIVE_MESSAGE_PTR = 0x00BA9E10;
const	DWORD	KO_UI_MINI_MAIN_RECEIVE_MESSAGE_FUNC = 0x008198B0;
const	DWORD	KO_UI_CLAN_WINDOW_RECEIVE_MESSAGE_PTR = 0x00BA2830;
const	DWORD	KO_UI_CLAN_WINDOW_RECEIVE_MESSAGE_FUNC = 0x0072E4C0;
const	DWORD	KO_UI_SKILL_TREE_RECEIVE_MESSAGE_PTR = 0x00B9C320;
const	DWORD	KO_UI_SKILL_TREE_RECEIVE_MESSAGE_FUNC = 0x00668F70;
const	DWORD	KO_UI_SEED_HELPER_RECEIVE_MESSAGE_PTR = 0x00BA7A58;
const	DWORD	KO_UI_SEED_HELPER_RECEIVE_MESSAGE_FUNC = 0x007D1570;
const	DWORD	KO_SKILL_TREE_ICON_UPDATE_FUNC = 0x0066A4D0;
const	DWORD	KO_UI_MINIMENU_RECEIVE_MESSAGE_PTR = 0x00BA9978;
const	DWORD	KO_UI_MINIMENU_RECEIVE_MESSAGE_FUNC = 0x00811AC0;
const	DWORD	KO_SET_VISIBLE_MINIMENU_FUNC = 0x0080F7F0;
const	DWORD	KO_SET_VISIBLE_GENIE_SUB_FUNC = 0x007F6F90;
const	DWORD	KO_SET_VISIBLE_GENIE_SUB_PTR = 0x00BA91B0;
const	DWORD	KO_ADD_INFO_MSG_FUNC = 0x006B24F0;
const	DWORD	KO_UI_SET_STATE_FUNC = 0x00414900;
const	DWORD	KO_UI_PIECE_CHANGE_RECEIVE_MESSAGE_PTR = 0x00B98608;
const	DWORD	KO_UI_PIECE_CHANGE_RECEIVE_MESSAGE_FUNC = 0x005D9C90;
const	DWORD	KO_UI_MERCHANT_PRICE_RECEIVE_MESSAGE_PTR = 0x00B9A0A0;
const	DWORD	KO_UI_MERCHANT_PRICE_RECEIVE_MESSAGE_FUNC = 0x00612980;

const	DWORD	KO_CAMERA_ZOOM_FUNC = 0x009D6830;
const	DWORD	KO_CAMERA_ZOOM_CALL_ADDR = 0x009DD69E;

const	DWORD	KO_UIBASE_IS_IN_FUNC = 0x0040F800;

// yeni bulunanlar
const	DWORD	KO_UI_TARGETBAR_RECEIVE_MESSAGE_PTR = 0x00BA9B20;
const	DWORD	KO_UI_WARP_RECEIVE_MESSAGE_PTR = 0x00BABBE8;
const	DWORD	KO_UI_LOGIN_RECEIVE_MESSAGE_PTR = 0x00B94580;
const	DWORD	KO_UI_LOGIN_RECEIVE_MESSAGE_FUNC = 0x004E1980;
const	DWORD	KO_UI_ANVIL_RECEIVE_MESSAGE_PTR = 0x00B98470;
const	DWORD	KO_UI_INVENTORY_RECEIVE_MESSAGE_PTR = 0x00B989C0;
const	DWORD	KO_UI_INVENTORY_RECEIVE_MESSAGE_FUNC = 0x005EEFD0;

static DWORD RealSend, RealRecv;

#define CONSOLE_FORE_COLOR_BLACK			0
#define CONSOLE_FORE_COLOR_BLUE				1
#define CONSOLE_FORE_COLOR_GREEN			2
#define CONSOLE_FORE_COLOR_CYAN				3
#define CONSOLE_FORE_COLOR_RED				4
#define CONSOLE_FORE_COLOR_MAGENTA			5
#define CONSOLE_FORE_COLOR_BROWN			6
#define CONSOLE_FORE_COLOR_LIGHTGRAY		7
#define CONSOLE_FORE_COLOR_DARKGRAY			8
#define CONSOLE_FORE_COLOR_LIGHTBLUE		9
#define CONSOLE_FORE_COLOR_LIGHTGREEN		10
#define CONSOLE_FORE_COLOR_LIGHTCYAN		11
#define CONSOLE_FORE_COLOR_LIGHTRED			12
#define CONSOLE_FORE_COLOR_LIGHTMAGENTA		13
#define CONSOLE_FORE_COLOR_YELLOW			14
#define CONSOLE_FORE_COLOR_WHITE			15

enum MSG_TYPE
{
	MSG_ERROR = 0,
	MSG_SUCCESS = 1,
	MSG_WARNING = 2,
	MSG_INFO = 3
};

enum MerchantOpcodes
{
	MERCHANT_OPEN = 1,
	MERCHANT_CLOSE = 2,
	MERCHANT_ITEM_ADD = 3,
	MERCHANT_ITEM_CANCEL = 4,
	MERCHANT_ITEM_LIST = 5,
	MERCHANT_ITEM_BUY = 6,
	MERCHANT_INSERT = 7,
	MERCHANT_TRADE_CANCEL = 8,
	MERCHANT_ITEM_PURCHASED = 9,

	MERCHANT_SLOT_UPDATE = 10,
	MERCHANT_CREATED = 11,
	MERCHANT_SPECIAL_CREATED = 12,

	MERCHANT_BUY_OPEN = 0x21,
	MERCHANT_BUY_INSERT = 0x22,
	MERCHANT_BUY_LIST = 0x23,
	MERCHANT_BUY_BUY = 0x24,
	MERCHANT_BUY_SOLD = 0x25,
	MERCHANT_BUY_BOUGHT = 0x26,
	MERCHANT_BUY_CLOSE = 0x27,
	MERCHANT_BUY_REGION_INSERT = 0x28,
	MERCHANT_BUY_UNK1 = 0x30
};
const uint8 MAX_MERCH_ITEMS = 12;

enum ItemGrade
{
	ITEM_UPGRADE_REQ = 1,
	ITEM_UPGRADE = 2,
	ITEM_ACCESSORIES = 3,
	ITEM_BIFROST_REQ = 4,
	ITEM_BIFROST_EXCHANGE = 5,
	ITEM_UPGRADE_REBIRTH = 7,
	ITEM_SEAL = 8,
	ITEM_CHARACTER_SEAL = 9,
	ITEM_SPECIAL_EXCHANGE = 11,
};

enum ResultOpCodes
{
	Failed = 0,
	Success = 1
};

enum MsgBoxTypes
{
	None,
	Ok,
	YesNo,
	Cancel,
	OkWithEdit,
	YesNoWithEdit
};

enum ParentTypes
{
	PARENT_NONE,
	PARENT_PAGE_STATE,
	PARENT_SKILL_TREE,
	PARENT_LOGIN
};

enum EventOpCode
{
	TEMPLE_EVENT_BORDER_DEFENCE_WAR = 4,
	TEMPLE_EVENT_CHAOS = 24,
	TEMPLE_EVENT_JURAD_MOUNTAIN = 100,
	TEMPLE_EVENT_UNDER_THE_CASTLE = 200
};

enum TempleOpCodes
{
	BIFROST_EVENT = 2,
	TEMPLE_SCREEN = 3,
	MONSTER_SQUARD = 5,
	MONSTER_STONE = 6,
	TEMPLE_EVENT = 7,
	TEMPLE_EVENT_JOIN = 8,
	TEMPLE_EVENT_DISBAND = 9,
	TEMPLE_EVENT_FINISH = 10,
	TEMPLE_EVENT_COUNTER = 16,
	ALTER_KILLED_MESSAGE = 0x31,
	//TEMPLE_DRAKI_TOWER_EVENT = 33,
	//TEMPLE_DRAKI_TOWER_TOWN = 38

	TEMPLE_DRAKI_ENTER = 33,
	TEMPLE_DRAKI_LIST = 34,
	TEMPLE_DRAKI_TIMER = 35,
	TEMPLE_DRAKI_OUT1 = 36,
	TEMPLE_DRAKI_OUT2 = 37,
	TEMPLE_DRAKI_TOWN = 38
};

int32 myrand(int32 min, int32 max);
uint64 RandUInt64();
bool string_is_valid(const std::string& str2);

INLINE time_t getMSTime()
{
#ifdef _WIN32
#if WINVER >= 0x0600
	typedef ULONGLONG(WINAPI* GetTickCount64_t)(void);
	static GetTickCount64_t pGetTickCount64 = nullptr;

	if (!pGetTickCount64)
	{
		HMODULE hModule = LoadLibraryA("KERNEL32.DLL");
		pGetTickCount64 = (GetTickCount64_t)GetProcAddress(hModule, "GetTickCount64");
		if (!pGetTickCount64)
			pGetTickCount64 = (GetTickCount64_t)GetTickCount;
		FreeLibrary(hModule);
	}

	return pGetTickCount64();
#else
	return GetTickCount();
#endif
#else
	struct timeval tv;
	gettimeofday(&tv, nullptr);
	return (tv.tv_sec * SECOND) + (tv.tv_usec / SECOND);
#endif
}

INLINE void STRTOLOWER(std::string& str)
{
	for (size_t i = 0; i < str.length(); ++i)
		str[i] = (char)tolower(str[i]);
};

#define foreach(itr, arr) \
	for (auto itr = arr.begin(); itr != arr.end(); itr++)

#define foreach_range(itr, arr) \
	for (auto itr = arr.first; itr != arr.second; itr++)

// ideally this guard should be scoped within the loop...
#define foreach_stlmap(itr, arr) \
	Guard _lock(arr.m_lock); \
	foreach_stlmap_nolock(itr, arr)

#define foreach_stlmap_nolock(itr, arr) \
	for (auto itr = arr.m_UserTypeMap.begin(); itr != arr.m_UserTypeMap.end(); itr++)

#define foreach_array(itr, arr) foreach_array_n(itr, arr, sizeof(arr) / sizeof(arr[0]))
#define foreach_array_n(itr, arr, len) for (auto itr = 0; itr < len; itr++)

const uint16 sBaseOff_size = 28;
//const uint16 skillIDs_size = 3062;
const uint16 skillIDs_size = 2312;

const DWORD skillBaseOffsets[sBaseOff_size] = { 0x00, 0x58, 0x5C, 0x60, 0x64, 0x68, 0x6C, 0x70, 0x74, 0x78, 0x7C, 0x80, 0x84, 0x88, 0x8C, 0x90, 0x98, 0x9C, 0xA0, 0xA4, 0xB0, 0xB4, 0xB8, 0xBC, 0xC0, 0xC4, 0xC8, 0xCC };
const DWORD skillIDs[skillIDs_size] = { 101001, 101002, 101003, 101005, 101007, 101009, 101010, 101015, 101016, 101017, 101020, 102001, 102002, 102003, 102005, 102007, 102008, 102009, 102014, 102015, 102016, 102019, 103001, 103002, 103003, 103005, 103007, 103009, 103010, 103011, 103016, 103017, 103018, 103021, 104001, 104002, 104003, 104004, 104005, 104006, 104007, 104008, 104009, 104010, 104012, 104015, 104016, 104017, 104018, 104020, 104021, 104024, 104033, 105001, 105002, 105003, 105005, 105007, 105009, 105010, 105015, 105016, 105017, 105020, 105255, 105500, 105505, 105510, 105515, 105520, 105525, 105530, 105535, 105540, 105545, 105550, 105555, 105557, 105560, 105605, 105610, 105615, 105620, 105630, 105635, 105640, 105645, 105650, 105655, 105660, 105705, 105707, 105710, 105715, 105717, 105720, 105725, 105727, 105730, 105731, 105733, 105735, 105737, 105740, 105745, 105750, 105752, 105755, 105757, 105758, 105760, 106001, 106002, 106003, 106005, 106007, 106009, 106010, 106015, 106016, 106017, 106018, 106019, 106020, 106021, 106022, 106023, 106024, 106255, 106500, 106505, 106510, 106515, 106520, 106525, 106530, 106535, 106540, 106545, 106550, 106555, 106557, 106560, 106570, 106575, 106580, 106605, 106610, 106615, 106620, 106630, 106635, 106640, 106645, 106650, 106655, 106660, 106670, 106675, 106680, 106705, 106707, 106710, 106715, 106717, 106720, 106725, 106727, 106730, 106731, 106733, 106735, 106737, 106740, 106745, 106750, 106752, 106755, 106757, 106758, 106760, 106770, 106775, 106780, 106781, 106782, 106800, 106802, 106805, 106810, 106815, 106820, 106821, 107001, 107002, 107003, 107005, 107006, 107007, 107010, 107030, 107031, 107036, 107037, 107038, 107041, 107265, 107500, 107505, 107510, 107515, 107520, 107525, 107530, 107535, 107540, 107545, 107550, 107552, 107555, 107557, 107560, 107600, 107610, 107615, 107620, 107630, 107635, 107640, 107645, 107650, 107655, 107656, 107700, 107705, 107710, 107715, 107725, 107730, 107735, 107736, 107748, 107760, 108001, 108002, 108003, 108005, 108006, 108007, 108010, 108030, 108031, 108036, 108037, 108038, 108039, 108040, 108041, 108042, 108043, 108044, 108045, 108265, 108500, 108505, 108510, 108515, 108520, 108525, 108530, 108535, 108540, 108545, 108550, 108552, 108555, 108557, 108560, 108562, 108566, 108570, 108575, 108580, 108585, 108600, 108610, 108615, 108620, 108630, 108635, 108640, 108645, 108650, 108655, 108656, 108670, 108675, 108680, 108685, 108700, 108705, 108710, 108715, 108725, 108730, 108735, 108736, 108748, 108760, 108770, 108775, 108780, 108800, 108802, 108805, 108810, 108815, 108820, 108821, 109001, 109002, 109003, 109004, 109005, 109007, 109009, 109010, 109015, 109035, 109036, 109041, 109042, 109043, 109046, 109269, 109503, 109506, 109509, 109515, 109518, 109524, 109527, 109533, 109535, 109539, 109542, 109543, 109545, 109548, 109551, 109554, 109556, 109557, 109560, 109603, 109606, 109609, 109612, 109615, 109618, 109624, 109627, 109630, 109633, 109635, 109639, 109642, 109643, 109645, 109648, 109651, 109654, 109656, 109657, 109660, 109703, 109706, 109709, 109715, 109718, 109724, 109727, 109733, 109735, 109739, 109742, 109743, 109745, 109748, 109751, 109754, 109756, 109757, 109760, 110001, 110002, 110003, 110004, 110005, 110007, 110009, 110010, 110015, 110035, 110036, 110041, 110042, 110043, 110044, 110045, 110046, 110047, 110048, 110049, 110050, 110269, 110503, 110506, 110509, 110515, 110518, 110524, 110527, 110533, 110535, 110539, 110542, 110543, 110545, 110548, 110551, 110554, 110556, 110557, 110560, 110570, 110571, 110572, 110573, 110574, 110575, 110603, 110606, 110609, 110612, 110615, 110618, 110624, 110627, 110630, 110633, 110635, 110639, 110642, 110643, 110645, 110648, 110651, 110654, 110656, 110657, 110660, 110670, 110671, 110672, 110673, 110674, 110703, 110706, 110709, 110715, 110718, 110724, 110727, 110733, 110735, 110739, 110742, 110743, 110745, 110748, 110751, 110754, 110756, 110757, 110760, 110762, 110770, 110771, 110772, 110773, 110774, 110800, 110802, 110805, 110810, 110815, 110820, 110825, 110826, 111001, 111002, 111003, 111004, 111005, 111006, 111007, 111008, 111009, 111010, 111012, 111015, 111016, 111017, 111018, 111020, 111021, 111024, 111033, 111266, 111500, 111503, 111509, 111511, 111512, 111518, 111520, 111521, 111525, 111527, 111529, 111530, 111535, 111536, 111539, 111542, 111545, 111548, 111551, 111554, 111557, 111560, 111603, 111606, 111609, 111611, 111612, 111615, 111620, 111621, 111624, 111627, 111629, 111630, 111633, 111636, 111639, 111641, 111642, 111645, 111650, 111651, 111654, 111655, 111656, 111657, 111660, 111700, 111703, 111709, 111712, 111715, 111721, 111724, 111727, 111729, 111730, 111733, 111736, 111739, 111742, 111745, 111750, 111751, 111754, 111757, 111760, 112001, 112002, 112003, 112004, 112005, 112006, 112007, 112008, 112009, 112010, 112012, 112015, 112016, 112017, 112018, 112019, 112020, 112021, 112022, 112023, 112024, 112025, 112026, 112027, 112033, 112266, 112500, 112503, 112509, 112511, 112512, 112518, 112520, 112521, 112525, 112527, 112529, 112530, 112535, 112536, 112539, 112542, 112545, 112548, 112551, 112554, 112557, 112560, 112570, 112575, 112580, 112603, 112606, 112609, 112611, 112612, 112615, 112620, 112621, 112624, 112627, 112629, 112630, 112633, 112636, 112639, 112641, 112642, 112645, 112650, 112651, 112654, 112655, 112656, 112657, 112660, 112670, 112671, 112672, 112673, 112674, 112675, 112676, 112700, 112703, 112709, 112712, 112715, 112721, 112724, 112727, 112729, 112730, 112733, 112736, 112739, 112742, 112745, 112750, 112751, 112754, 112757, 112760, 112770, 112771, 112772, 112800, 112802, 112805, 112810, 112815, 112820, 112825, 112826, 113001, 113003, 113005, 113007, 113009, 113010, 113015, 113016, 113017, 113020, 114001, 114003, 114005, 114007, 114009, 114010, 114015, 114016, 114017, 114020, 114255, 114500, 114503, 114506, 114509, 114512, 114515, 114518, 114520, 114525, 114530, 114535, 114540, 114545, 114548, 114551, 114554, 114557, 114560, 114605, 114610, 114615, 114620, 114630, 114635, 114640, 114645, 114650, 114655, 114660, 114700, 114705, 114710, 114715, 114720, 114725, 114730, 114735, 114740, 114745, 114750, 114755, 114760, 115001, 115003, 115005, 115007, 115009, 115010, 115015, 115016, 115017, 115018, 115019, 115020, 115021, 115022, 115023, 115024, 115255, 115500, 115503, 115506, 115509, 115512, 115515, 115518, 115520, 115525, 115530, 115535, 115540, 115545, 115548, 115551, 115554, 115557, 115560, 115563, 115566, 115570, 115572, 115580, 115605, 115610, 115615, 115620, 115630, 115635, 115640, 115645, 115650, 115655, 115660, 115670, 115675, 115680, 115700, 115705, 115710, 115715, 115720, 115725, 115730, 115735, 115740, 115745, 115750, 115755, 115760, 115765, 115770, 115775, 115780, 115802, 115805, 115808, 115810, 115815, 115820, 120011, 120021, 120022, 130013, 130014, 188566, 189642, 189742, 190573, 190642, 190672, 190673, 190742, 190772, 190773, 194509, 195509, 201001, 201002, 201003, 201005, 201007, 201009, 201010, 201015, 201016, 201017, 201020, 202001, 202002, 202003, 202005, 202006, 202007, 202008, 202011, 202012, 202013, 202016, 203001, 203002, 203003, 203005, 203007, 203009, 203010, 203011, 203016, 203017, 203018, 203021, 204001, 204002, 204003, 204004, 204005, 204006, 204007, 204008, 204009, 204010, 204012, 204015, 204016, 204017, 204018, 204020, 204021, 204024, 204033, 205001, 205002, 205003, 205005, 205007, 205009, 205010, 205015, 205016, 205017, 205020, 205255, 205500, 205505, 205510, 205515, 205520, 205525, 205530, 205535, 205540, 205545, 205550, 205555, 205557, 205560, 205605, 205610, 205615, 205620, 205630, 205635, 205640, 205645, 205650, 205655, 205660, 205705, 205707, 205710, 205715, 205717, 205720, 205725, 205727, 205730, 205731, 205733, 205735, 205737, 205740, 205745, 205750, 205752, 205755, 205757, 205758, 205760, 206001, 206002, 206003, 206005, 206007, 206009, 206010, 206015, 206016, 206017, 206018, 206019, 206020, 206021, 206022, 206023, 206024, 206255, 206500, 206505, 206510, 206515, 206520, 206525, 206530, 206535, 206540, 206545, 206550, 206555, 206557, 206560, 206570, 206575, 206580, 206605, 206610, 206615, 206620, 206630, 206635, 206640, 206645, 206650, 206655, 206660, 206670, 206675, 206680, 206705, 206707, 206710, 206715, 206717, 206720, 206725, 206727, 206730, 206731, 206733, 206735, 206737, 206740, 206745, 206750, 206752, 206755, 206757, 206758, 206760, 206770, 206775, 206780, 206781, 206782, 206800, 206802, 206805, 206810, 206815, 206820, 206821, 207001, 207002, 207003, 207005, 207006, 207007, 207010, 207030, 207031, 207036, 207037, 207038, 207041, 207265, 207500, 207505, 207510, 207515, 207520, 207525, 207530, 207535, 207540, 207545, 207550, 207552, 207555, 207557, 207560, 207600, 207610, 207615, 207620, 207630, 207635, 207640, 207645, 207650, 207655, 207656, 207700, 207705, 207710, 207715, 207725, 207730, 207735, 207736, 207748, 207760, 208001, 208002, 208003, 208005, 208006, 208007, 208010, 208030, 208031, 208036, 208037, 208038, 208039, 208040, 208041, 208042, 208043, 208044, 208045, 208265, 208500, 208505, 208510, 208515, 208520, 208525, 208530, 208535, 208540, 208545, 208550, 208552, 208555, 208557, 208560, 208562, 208566, 208570, 208575, 208580, 208585, 208600, 208610, 208615, 208620, 208630, 208635, 208640, 208645, 208650, 208655, 208656, 208670, 208675, 208680, 208685, 208700, 208705, 208710, 208715, 208725, 208730, 208735, 208736, 208748, 208760, 208770, 208775, 208780, 208800, 208802, 208805, 208810, 208815, 208820, 208821, 209001, 209002, 209003, 209004, 209005, 209007, 209009, 209010, 209015, 209035, 209036, 209041, 209042, 209043, 209046, 209269, 209503, 209506, 209509, 209515, 209518, 209524, 209527, 209533, 209535, 209539, 209542, 209543, 209545, 209548, 209551, 209554, 209556, 209557, 209560, 209603, 209606, 209609, 209612, 209615, 209618, 209624, 209627, 209630, 209633, 209635, 209639, 209642, 209643, 209645, 209648, 209651, 209654, 209656, 209657, 209660, 209703, 209706, 209709, 209715, 209718, 209724, 209727, 209733, 209735, 209739, 209742, 209743, 209745, 209748, 209751, 209754, 209756, 209757, 209760, 210001, 210002, 210003, 210004, 210005, 210007, 210009, 210010, 210015, 210035, 210036, 210041, 210042, 210043, 210044, 210045, 210046, 210047, 210048, 210049, 210050, 210269, 210503, 210506, 210509, 210515, 210518, 210524, 210527, 210533, 210535, 210539, 210542, 210543, 210545, 210548, 210551, 210554, 210556, 210557, 210560, 210570, 210571, 210572, 210573, 210574, 210575, 210603, 210606, 210609, 210612, 210615, 210618, 210624, 210627, 210630, 210633, 210635, 210639, 210642, 210643, 210645, 210648, 210651, 210654, 210656, 210657, 210660, 210670, 210671, 210672, 210673, 210674, 210703, 210706, 210709, 210715, 210718, 210724, 210727, 210733, 210735, 210739, 210742, 210743, 210745, 210748, 210751, 210754, 210756, 210757, 210760, 210762, 210770, 210771, 210772, 210773, 210774, 210800, 210802, 210805, 210810, 210815, 210820, 210825, 210826, 211001, 211002, 211003, 211004, 211005, 211006, 211007, 211008, 211009, 211010, 211012, 211015, 211016, 211017, 211018, 211020, 211021, 211024, 211033, 211266, 211500, 211503, 211509, 211511, 211512, 211518, 211520, 211521, 211525, 211527, 211529, 211530, 211535, 211536, 211539, 211542, 211545, 211548, 211551, 211554, 211557, 211560, 211603, 211606, 211609, 211611, 211612, 211615, 211620, 211621, 211624, 211627, 211629, 211630, 211633, 211636, 211639, 211641, 211642, 211645, 211650, 211651, 211654, 211655, 211656, 211657, 211660, 211700, 211703, 211709, 211712, 211715, 211721, 211724, 211727, 211729, 211730, 211733, 211736, 211739, 211742, 211745, 211750, 211751, 211754, 211757, 211760, 212001, 212002, 212003, 212004, 212005, 212006, 212007, 212008, 212009, 212010, 212012, 212015, 212016, 212017, 212018, 212019, 212020, 212021, 212022, 212023, 212024, 212025, 212026, 212027, 212033, 212266, 212500, 212503, 212509, 212511, 212512, 212518, 212520, 212521, 212525, 212527, 212529, 212530, 212535, 212536, 212539, 212542, 212545, 212548, 212551, 212554, 212557, 212560, 212570, 212575, 212580, 212603, 212606, 212609, 212611, 212612, 212615, 212620, 212621, 212624, 212627, 212629, 212630, 212633, 212636, 212639, 212641, 212642, 212645, 212650, 212651, 212654, 212655, 212656, 212657, 212660, 212670, 212671, 212672, 212673, 212674, 212675, 212676, 212700, 212703, 212709, 212712, 212715, 212721, 212724, 212727, 212729, 212730, 212733, 212736, 212739, 212742, 212745, 212750, 212751, 212754, 212757, 212760, 212770, 212771, 212772, 212800, 212802, 212805, 212810, 212815, 212820, 212825, 212826, 213001, 213003, 213005, 213007, 213009, 213010, 213015, 213016, 213017, 213020, 214001, 214003, 214005, 214007, 214009, 214010, 214015, 214016, 214017, 214020, 214255, 214500, 214503, 214506, 214509, 214512, 214515, 214518, 214520, 214525, 214530, 214535, 214540, 214545, 214548, 214551, 214554, 214557, 214560, 214605, 214610, 214615, 214620, 214630, 214635, 214640, 214645, 214650, 214655, 214660, 214700, 214705, 214710, 214715, 214720, 214725, 214730, 214735, 214740, 214745, 214750, 214755, 214760, 215001, 215003, 215005, 215007, 215009, 215010, 215015, 215016, 215017, 215018, 215019, 215020, 215021, 215022, 215023, 215024, 215255, 215500, 215503, 215506, 215509, 215512, 215515, 215518, 215520, 215525, 215530, 215535, 215540, 215545, 215548, 215551, 215554, 215557, 215560, 215563, 215566, 215570, 215572, 215580, 215605, 215610, 215615, 215620, 215630, 215635, 215640, 215645, 215650, 215655, 215660, 215670, 215675, 215680, 215700, 215705, 215710, 215715, 215720, 215725, 215730, 215735, 215740, 215745, 215750, 215755, 215760, 215765, 215770, 215775, 215780, 215802, 215805, 215808, 215810, 215815, 215820, 220011, 220021, 220022, 230013, 230014, 288566, 289642, 289742, 290573, 290642, 290672, 290673, 290742, 290772, 290773, 294509, 295509, 300101, 300102, 300103, 300104, 300105, 300106, 300107, 300108, 300109, 300110, 300111, 300112, 300113, 300114, 300115, 300116, 300117, 300118, 300119, 300120, 300121, 300122, 300123, 300124, 300125, 300126, 300127, 300128, 300129, 300130, 300131, 300132, 300133, 300134, 300135, 300136, 300137, 300138, 300139, 300140, 300141, 300142, 300143, 300144, 300145, 300146, 300147, 300148, 300149, 300150, 300151, 300152, 300153, 300154, 300155, 300156, 300157, 300158, 300159, 300160, 300161, 300162, 300163, 300164, 300165, 300166, 300167, 300168, 300169, 300170, 300171, 300172, 300173, 300174, 300175, 300176, 300177, 300178, 300179, 300180, 300181, 300182, 300183, 300184, 300185, 300186, 300187, 300188, 300189, 300190, 300191, 300192, 300193, 300194, 300195, 300196, 300197, 300198, 300199, 300200, 300201, 300202, 300203, 300204, 300205, 300206, 300207, 300208, 300209, 300210, 300211, 300212, 300213, 300214, 300215, 300216, 300217, 300218, 300219, 300220, 300221, 300222, 300223, 300224, 300225, 300226, 300228, 300229, 300231, 300232, 300233, 300234, 300235, 300236, 300237, 300238, 300239, 300240, 300242, 300243, 300244, 300251, 300252, 300253, 300261, 300264, 300269, 300271, 300272, 300281, 300291, 300301, 300309, 300310, 300311, 300321, 300322, 300331, 300341, 300351, 300361, 300371, 300381, 300391, 300401, 300411, 300421, 300422, 300431, 300432, 300433, 300434, 300435, 300436, 300437, 300438, 300439, 300440, 300441, 300442, 300443, 300444, 300445, 300446, 300447, 300448, 300449, 300450, 300451, 300452, 300453, 300454, 300455, 300456, 300457, 300458, 300459, 300460, 300461, 300462, 300463, 300464, 300465, 300466, 300467, 300468, 300469, 300470, 300471, 300472, 300473, 300474, 300475, 300476, 300477, 300478, 300479, 300480, 300481, 300482, 300483, 300484, 300485, 300486, 300487, 300488, 300489, 300490, 300491, 300492, 300493, 300494, 300495, 300496, 300497, 300498, 300499, 300500, 300501, 300502, 300503, 300504, 300505, 300506, 300507, 300508, 300509, 300510, 300511, 300512, 300513, 300514, 300515, 300516, 300517, 300518, 300519, 300520, 300521, 300522, 300523, 300524, 300525, 300526, 300527, 300528, 300529, 300530, 300531, 300532, 300533, 300534, 300535, 300536, 300537, 300538, 300539, 300540, 300541, 300542, 300543, 300544, 300545, 300546, 300547, 300548, 300549, 300550, 300551, 300552, 300553, 300554, 300555, 300556, 300557, 300558, 300559, 300560, 300561, 300562, 300563, 300564, 300565, 300566, 300567, 300568, 300569, 300570, 300571, 300572, 300573, 300574, 300575, 300576, 300577, 300578, 300579, 300580, 300581, 300582, 301000, 301001, 301002, 301003, 301004, 301005, 301006, 301007, 301008, 301009, 301010, 301011, 301012, 301013, 301014, 301015, 301016, 301017, 301018, 301019, 301020, 301021, 301022, 301023, 301024, 301025, 301027, 301028, 301029, 301030, 301118, 302000, 302045, 302090, 302135, 302180, 302225, 302270, 302315, 302316, 302317, 302318, 302319, 302320, 302321, 302322, 302323, 302324, 302325, 302326, 302327, 302328, 302329, 302330, 302331, 302332, 302333, 302334, 302335, 302336, 302337, 302338, 302339, 302340, 302341, 302342, 302343, 302344, 302345, 302346, 309539, 309542, 309543, 309545, 449999, 450001, 450002, 450003, 450004, 450005, 450011, 450012, 450013, 450014, 450017, 450018, 460001, 460002, 460003, 460004, 460005, 460006, 470001, 470010, 470020, 470030, 470040, 470050, 470060, 470070, 470080, 470090, 470100, 470110, 470120, 470130, 470132, 470140, 470150, 470160, 470170, 470180, 470190, 470192, 470200, 470202, 470210, 470212, 470220, 470230, 470240, 470248, 470250, 470260, 470270, 470272, 470274, 470276, 470280, 470290, 470300, 470310, 470320, 470322, 470330, 470340, 470350, 470910, 470920, 471001, 471010, 471020, 471030, 471040, 471050, 471060, 471070, 471080, 471090, 471100, 471110, 471120, 471130, 471132, 471140, 471150, 471160, 471170, 471180, 471190, 471192, 471200, 471202, 471210, 471212, 471220, 471230, 471240, 471248, 471250, 471260, 471270, 471272, 471274, 471276, 471280, 471290, 471300, 471310, 471320, 471322, 471330, 471340, 471350, 471910, 471920, 472001, 472010, 472020, 472030, 472040, 472050, 472060, 472070, 472080, 472090, 472100, 472110, 472120, 472130, 472132, 472140, 472150, 472160, 472170, 472180, 472190, 472192, 472200, 472202, 472210, 472212, 472220, 472230, 472240, 472248, 472250, 472260, 472270, 472272, 472274, 472276, 472280, 472290, 472300, 472310, 472320, 472322, 472330, 472340, 472350, 472910, 472920, 478001, 478002, 478003, 478004, 478005, 478006, 478007, 478008, 478009, 478010, 478011, 478012, 478013, 478014, 478015, 478016, 478017, 478018, 478019, 478020, 478021, 478022, 478023, 478024, 478025, 478026, 478027, 480001, 480002, 480003, 480004, 480005, 480006, 480007, 480008, 480009, 480010, 480011, 480012, 480013, 480014, 480015, 480016 };

const DWORD KO_WND = 0x00BB4C64;
const DWORD KO_KEY = 0x00DC6838;
const DWORD KO_CHAR = 0x00E61920;
const DWORD KO_PKT = 0x00E47844;
const DWORD KO_SMMB = 0x00E61818;
const DWORD KO_SMMF = 0x004BFA20;

extern uint8 g_bRunning;